import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.stream.JsonParsingException;
import java.io.IOException;
import java.io.StringReader;

/**
 * Created by Yuqing Wang on 2017/4/15.
 */
public class ScanReTweetMapper extends Mapper<LongWritable, Text, LongWritable, Text> {

    //use final String to represent the name of field in the input Json string to avoid magic strings
    private static final String RETWEETED_STATUS = "retweeted_status";
    private static final String RETWEET_COUNT = "retweet_count";
    private static final String USER = "user";
    private static final String NAME = "name";

    /**
     * this method overrides the map method in the Mapper class so that it can map the retweet count with the username of that tweet's author.
     * @param key the key automatically generated by the hadoop
     * @param value a json string from the input file
     * @param output a Context object that outputs the result of the map method
     * @throws IOException when the program fails to produce output
     * @throws InterruptedException when the program fails to produce output
     */
    public void map(LongWritable key, Text value, Context output) throws IOException, InterruptedException {
        //convert the input json string from the type Text to String and create an object of JsonReader to read from the string
        String line = value.toString();
        JsonReader reader = Json.createReader(new StringReader(line));

        try {
            //read the mainObject of the input json string and the JsonObject retweeted_status which contains the details of retweet
            JsonObject mainObject = reader.readObject();
            JsonObject retweetedStatus = mainObject.getJsonObject(RETWEETED_STATUS);

            //get the retweeted count of this tweet after calling the checkJsonInt method in the Checker class to assure the count isn't negative
            Checker.checkJsonInt(retweetedStatus, RETWEET_COUNT);
            int retweetCount = retweetedStatus.getInt(RETWEET_COUNT);

            //get the user who posted this tweet
            JsonObject user = retweetedStatus.getJsonObject(USER);

            //get the user's name
            Checker.checkJsonString(user, NAME);
            String userName = user.getString(NAME);

            //map the retweet count with the username of that tweet's author
            output.write(new LongWritable(retweetCount), new Text(userName));

        } catch (NullPointerException e) {
            //when the field is not valid, a NullPointerException will be thrown and this field will be ignore
        }  catch (JsonParsingException e) {
            System.out.println("Not valid Json String" + e.getMessage());
        } finally {
            reader.close();
        }
    }
}
